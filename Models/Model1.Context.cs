//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MVC.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class hospitalEntities : DbContext
    {
        public hospitalEntities()
            : base("name=hospitalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<cita> cita { get; set; }
        public virtual DbSet<medico> medico { get; set; }
        public virtual DbSet<paciente> paciente { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
    
        public virtual int act_cita(string cod_cita, Nullable<System.DateTime> fecha, Nullable<System.TimeSpan> hora, string id_paciente, string id_medico, Nullable<int> valor, string diagnostico, string nom_acompañante, Nullable<bool> activo)
        {
            var cod_citaParameter = cod_cita != null ?
                new ObjectParameter("cod_cita", cod_cita) :
                new ObjectParameter("cod_cita", typeof(string));
    
            var fechaParameter = fecha.HasValue ?
                new ObjectParameter("fecha", fecha) :
                new ObjectParameter("fecha", typeof(System.DateTime));
    
            var horaParameter = hora.HasValue ?
                new ObjectParameter("hora", hora) :
                new ObjectParameter("hora", typeof(System.TimeSpan));
    
            var id_pacienteParameter = id_paciente != null ?
                new ObjectParameter("id_paciente", id_paciente) :
                new ObjectParameter("id_paciente", typeof(string));
    
            var id_medicoParameter = id_medico != null ?
                new ObjectParameter("id_medico", id_medico) :
                new ObjectParameter("id_medico", typeof(string));
    
            var valorParameter = valor.HasValue ?
                new ObjectParameter("valor", valor) :
                new ObjectParameter("valor", typeof(int));
    
            var diagnosticoParameter = diagnostico != null ?
                new ObjectParameter("diagnostico", diagnostico) :
                new ObjectParameter("diagnostico", typeof(string));
    
            var nom_acompañanteParameter = nom_acompañante != null ?
                new ObjectParameter("nom_acompañante", nom_acompañante) :
                new ObjectParameter("nom_acompañante", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("activo", activo) :
                new ObjectParameter("activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("act_cita", cod_citaParameter, fechaParameter, horaParameter, id_pacienteParameter, id_medicoParameter, valorParameter, diagnosticoParameter, nom_acompañanteParameter, activoParameter);
        }
    
        public virtual int actualizar_paciente(string id_paciente, string tip_doc, string nom_paciente, string dir_paciente, string tel_paciente, Nullable<bool> activo)
        {
            var id_pacienteParameter = id_paciente != null ?
                new ObjectParameter("id_paciente", id_paciente) :
                new ObjectParameter("id_paciente", typeof(string));
    
            var tip_docParameter = tip_doc != null ?
                new ObjectParameter("tip_doc", tip_doc) :
                new ObjectParameter("tip_doc", typeof(string));
    
            var nom_pacienteParameter = nom_paciente != null ?
                new ObjectParameter("nom_paciente", nom_paciente) :
                new ObjectParameter("nom_paciente", typeof(string));
    
            var dir_pacienteParameter = dir_paciente != null ?
                new ObjectParameter("dir_paciente", dir_paciente) :
                new ObjectParameter("dir_paciente", typeof(string));
    
            var tel_pacienteParameter = tel_paciente != null ?
                new ObjectParameter("tel_paciente", tel_paciente) :
                new ObjectParameter("tel_paciente", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("activo", activo) :
                new ObjectParameter("activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("actualizar_paciente", id_pacienteParameter, tip_docParameter, nom_pacienteParameter, dir_pacienteParameter, tel_pacienteParameter, activoParameter);
        }
    
        public virtual int anula_cita(string pcod_cita)
        {
            var pcod_citaParameter = pcod_cita != null ?
                new ObjectParameter("pcod_cita", pcod_cita) :
                new ObjectParameter("pcod_cita", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("anula_cita", pcod_citaParameter);
        }
    
        public virtual int anular_medico(string id_medico)
        {
            var id_medicoParameter = id_medico != null ?
                new ObjectParameter("Id_medico", id_medico) :
                new ObjectParameter("Id_medico", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("anular_medico", id_medicoParameter);
        }
    
        public virtual int anular_paciente(string id_paciente)
        {
            var id_pacienteParameter = id_paciente != null ?
                new ObjectParameter("id_paciente", id_paciente) :
                new ObjectParameter("id_paciente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("anular_paciente", id_pacienteParameter);
        }
    
        public virtual ObjectResult<consultar_citas_Result> consultar_citas(string pcod_cita)
        {
            var pcod_citaParameter = pcod_cita != null ?
                new ObjectParameter("pcod_cita", pcod_cita) :
                new ObjectParameter("pcod_cita", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultar_citas_Result>("consultar_citas", pcod_citaParameter);
        }
    
        public virtual ObjectResult<consultar_medico_Result> consultar_medico(string id_medico)
        {
            var id_medicoParameter = id_medico != null ?
                new ObjectParameter("id_medico", id_medico) :
                new ObjectParameter("id_medico", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultar_medico_Result>("consultar_medico", id_medicoParameter);
        }
    
        public virtual ObjectResult<consultar_paciente_Result> consultar_paciente(string id_paciente)
        {
            var id_pacienteParameter = id_paciente != null ?
                new ObjectParameter("id_paciente", id_paciente) :
                new ObjectParameter("id_paciente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultar_paciente_Result>("consultar_paciente", id_pacienteParameter);
        }
    
        public virtual int guardar_medico(string id_medico, string nom_medico, string especialidad, string tel_medico, Nullable<bool> activo)
        {
            var id_medicoParameter = id_medico != null ?
                new ObjectParameter("Id_medico", id_medico) :
                new ObjectParameter("Id_medico", typeof(string));
    
            var nom_medicoParameter = nom_medico != null ?
                new ObjectParameter("nom_medico", nom_medico) :
                new ObjectParameter("nom_medico", typeof(string));
    
            var especialidadParameter = especialidad != null ?
                new ObjectParameter("especialidad", especialidad) :
                new ObjectParameter("especialidad", typeof(string));
    
            var tel_medicoParameter = tel_medico != null ?
                new ObjectParameter("tel_medico", tel_medico) :
                new ObjectParameter("tel_medico", typeof(string));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("activo", activo) :
                new ObjectParameter("activo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("guardar_medico", id_medicoParameter, nom_medicoParameter, especialidadParameter, tel_medicoParameter, activoParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
